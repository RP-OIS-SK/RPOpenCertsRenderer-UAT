{"ast":null,"code":"import templateRegistry from \"../../templates\";\nimport { get } from \"lodash\";\nimport attachmentToTemplates from \"../../attachmentTemplates\";\nexport const documentTemplates = (document, handleHeightUpdate) => {\n  if (!document) return []; // Find the template in the template registry or use a default template\n\n  const templateName = get(document, \"$template.name\");\n  const selectedTemplate = templateRegistry[templateName] || templateRegistry.default; // Create additional tabs from attachments, passing in handleHeightUpdate to allow\n  // attachment renderers to update parent component height\n\n  const templatesFromAttachments = attachmentToTemplates(get(document, \"attachments\", []), handleHeightUpdate);\n  return [...selectedTemplate, ...templatesFromAttachments];\n};\nexport const documentTemplateTabs = document => {\n  const templates = documentTemplates(document);\n  return templates.map(template => ({\n    id: template.id,\n    label: template.label\n  }));\n}; // Originally using https://tommcfarlin.com/check-if-a-page-is-in-an-iframe/\n// Currently using https://stackoverflow.com/questions/326069/how-to-identify-if-a-webpage-is-being-loaded-inside-an-iframe-or-directly-into-t\n\nexport const inIframe = () => {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n};","map":{"version":3,"sources":["/Users/Shared/opencerts/opencerts-renderer/src/components/documentViewer/utils/index.js"],"names":["templateRegistry","get","attachmentToTemplates","documentTemplates","document","handleHeightUpdate","templateName","selectedTemplate","default","templatesFromAttachments","documentTemplateTabs","templates","map","template","id","label","inIframe","window","self","top","e"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,iBAA7B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,qBAAP,MAAkC,2BAAlC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAWC,kBAAX,KAAkC;AACjE,MAAI,CAACD,QAAL,EAAe,OAAO,EAAP,CADkD,CAEjE;;AACA,QAAME,YAAY,GAAGL,GAAG,CAACG,QAAD,EAAW,gBAAX,CAAxB;AACA,QAAMG,gBAAgB,GACpBP,gBAAgB,CAACM,YAAD,CAAhB,IAAkCN,gBAAgB,CAACQ,OADrD,CAJiE,CAOjE;AACA;;AACA,QAAMC,wBAAwB,GAAGP,qBAAqB,CACpDD,GAAG,CAACG,QAAD,EAAW,aAAX,EAA0B,EAA1B,CADiD,EAEpDC,kBAFoD,CAAtD;AAIA,SAAO,CAAC,GAAGE,gBAAJ,EAAsB,GAAGE,wBAAzB,CAAP;AACD,CAdM;AAgBP,OAAO,MAAMC,oBAAoB,GAAGN,QAAQ,IAAI;AAC9C,QAAMO,SAAS,GAAGR,iBAAiB,CAACC,QAAD,CAAnC;AACA,SAAOO,SAAS,CAACC,GAAV,CAAcC,QAAQ,KAAK;AAChCC,IAAAA,EAAE,EAAED,QAAQ,CAACC,EADmB;AAEhCC,IAAAA,KAAK,EAAEF,QAAQ,CAACE;AAFgB,GAAL,CAAtB,CAAP;AAID,CANM,C,CAQP;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,MAAI;AACF,WAAOC,MAAM,CAACC,IAAP,KAAgBD,MAAM,CAACE,GAA9B;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF,CANM","sourcesContent":["import templateRegistry from \"../../templates\";\nimport { get } from \"lodash\";\nimport attachmentToTemplates from \"../../attachmentTemplates\";\n\nexport const documentTemplates = (document, handleHeightUpdate) => {\n  if (!document) return [];\n  // Find the template in the template registry or use a default template\n  const templateName = get(document, \"$template.name\");\n  const selectedTemplate =\n    templateRegistry[templateName] || templateRegistry.default;\n\n  // Create additional tabs from attachments, passing in handleHeightUpdate to allow\n  // attachment renderers to update parent component height\n  const templatesFromAttachments = attachmentToTemplates(\n    get(document, \"attachments\", []),\n    handleHeightUpdate\n  );\n  return [...selectedTemplate, ...templatesFromAttachments];\n};\n\nexport const documentTemplateTabs = document => {\n  const templates = documentTemplates(document);\n  return templates.map(template => ({\n    id: template.id,\n    label: template.label\n  }));\n};\n\n// Originally using https://tommcfarlin.com/check-if-a-page-is-in-an-iframe/\n// Currently using https://stackoverflow.com/questions/326069/how-to-identify-if-a-webpage-is-being-loaded-inside-an-iframe-or-directly-into-t\nexport const inIframe = () => {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}