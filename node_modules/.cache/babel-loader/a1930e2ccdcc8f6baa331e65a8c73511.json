{"ast":null,"code":"import React from\"react\";import{tz}from\"moment-timezone\";import{toWordsOrdinal,toWords}from\"number-to-words\";export var TIMEZONE=\"Asia/Singapore\";export var printMeritTextStyle={fontFamily:\"Arial\",fontWeight:\"500!important\",fontSize:\"2rem\",color:\"#555\",textAlign:\"center\"};export var formatDDMMMYYYY=function formatDDMMMYYYY(dateString){if(!dateString)return null;var date=new Date(dateString);return tz(date,TIMEZONE).format(\"D MMMM YYYY\");};export var formatDate=function formatDate(dateString){if(!dateString)return null;var date=new Date(dateString);// use moment-timezone, get the full year\nvar year=Number(tz(date,TIMEZONE).format(\"YYYY\"));// use number-to-word, convert to words\nvar yearStr=toWords(year);// change - begin with UpperCase, place commas with 'and'\nyearStr=yearStr.replace(\",\",\" and\");var yearReplacedStr=yearStr.substring(0,1).toUpperCase().concat(yearStr.substring(1));return/*#__PURE__*/React.createElement(\"span\",null,tz(date,TIMEZONE).format(\"MMMM\"),\" \",/*#__PURE__*/React.createElement(\"br\",null),\" \",yearReplacedStr);};export var formatNRIC=function formatNRIC(nricFin){if(!nricFin)return null;var arrayNric=nricFin.split(\":\");return arrayNric.length===3?arrayNric[2]:null;};export var formatDatePrefix=function formatDatePrefix(dateString){if(!dateString)return null;var date=new Date(dateString);// use moment-timezone, get the day\nvar day=Number(tz(date,TIMEZONE).format(\"D\"));// use number-to-words, toWordsOrdinal - output first, second etc.\nvar strDay=toWordsOrdinal(day);// eg first day of\nreturn/*#__PURE__*/React.createElement(\"span\",null,strDay,\" day of\");};export var formatCertName=function formatCertName(meritFlag){return/*#__PURE__*/React.createElement(\"p\",{style:printMeritTextStyle},meritFlag===\"Y\"?\"WITH MERIT\":\"\");};export var formatCertID=function formatCertID(certId){if(!certId)return null;var arrayCertId=certId.split(\":\");return arrayCertId.length>0?arrayCertId[0]:null;};export var formatBold=function formatBold(str){return/*#__PURE__*/React.createElement(\"strong\",null,str);};export var formatSignatoriesPosition=function formatSignatoriesPosition(sigPosition){if(!sigPosition)return null;return sigPosition.split(\"|\");};","map":{"version":3,"sources":["/OpenCerts/demo-opencerts-renderer/src/components/templates/RPTemplate/common/functions.js"],"names":["React","tz","toWordsOrdinal","toWords","TIMEZONE","printMeritTextStyle","fontFamily","fontWeight","fontSize","color","textAlign","formatDDMMMYYYY","dateString","date","Date","format","formatDate","year","Number","yearStr","replace","yearReplacedStr","substring","toUpperCase","concat","formatNRIC","nricFin","arrayNric","split","length","formatDatePrefix","day","strDay","formatCertName","meritFlag","formatCertID","certId","arrayCertId","formatBold","str","formatSignatoriesPosition","sigPosition"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { tz } from \"moment-timezone\";\nimport { toWordsOrdinal, toWords } from \"number-to-words\";\n\nexport const TIMEZONE = \"Asia/Singapore\";\n\nexport const printMeritTextStyle = {\n  fontFamily: \"Arial\",\n  fontWeight: \"500!important\",\n  fontSize: \"2rem\",\n  color: \"#555\",\n  textAlign: \"center\"\n};\n\nexport const formatDDMMMYYYY = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n\n  return tz(date, TIMEZONE).format(\"D MMMM YYYY\");\n};\n\nexport const formatDate = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n\n  // use moment-timezone, get the full year\n  const year = Number(tz(date, TIMEZONE).format(\"YYYY\"));\n\n  // use number-to-word, convert to words\n  let yearStr = toWords(year);\n\n  // change - begin with UpperCase, place commas with 'and'\n  yearStr = yearStr.replace(\",\", \" and\");\n  const yearReplacedStr = yearStr\n    .substring(0, 1)\n    .toUpperCase()\n    .concat(yearStr.substring(1));\n  return (\n    <span>\n      {tz(date, TIMEZONE).format(\"MMMM\")} <br /> {yearReplacedStr}\n    </span>\n  );\n};\n\nexport const formatNRIC = nricFin => {\n  if (!nricFin) return null;\n  const arrayNric = nricFin.split(\":\");\n  return arrayNric.length === 3 ? arrayNric[2] : null;\n};\n\nexport const formatDatePrefix = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n\n  // use moment-timezone, get the day\n  const day = Number(tz(date, TIMEZONE).format(\"D\"));\n\n  // use number-to-words, toWordsOrdinal - output first, second etc.\n  const strDay = toWordsOrdinal(day);\n\n  // eg first day of\n  return <span>{strDay} day of</span>;\n};\n\nexport const formatCertName = meritFlag => (\n  <p style={printMeritTextStyle}>{meritFlag === \"Y\" ? \"WITH MERIT\" : \"\"}</p>\n);\n\nexport const formatCertID = certId => {\n  if (!certId) return null;\n  const arrayCertId = certId.split(\":\");\n  return arrayCertId.length > 0 ? arrayCertId[0] : null;\n};\n\nexport const formatBold = str => <strong>{str}</strong>;\n\nexport const formatSignatoriesPosition = sigPosition => {\n  if (!sigPosition) return null;\n  return sigPosition.split(\"|\");\n};\n"]},"metadata":{},"sourceType":"module"}