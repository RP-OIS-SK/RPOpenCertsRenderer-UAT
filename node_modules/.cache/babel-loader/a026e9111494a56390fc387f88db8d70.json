{"ast":null,"code":"var _jsxFileName = \"/OpenCerts/opencerts-renderer/src/components/templates/RPTemplate/common/functions.js\";\nimport React from \"react\";\nimport { tz } from \"moment-timezone\";\nimport { toWordsOrdinal, toWords } from \"number-to-words\";\nexport const TIMEZONE = \"Asia/Singapore\";\nexport const printMeritTextStyle = {\n  fontFamily: \"Arial\",\n  fontWeight: \"500!important\",\n  fontSize: \"2rem\",\n  color: \"#555\",\n  textAlign: \"center\"\n};\nexport const formatDDMMMYYYY = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n  return tz(date, TIMEZONE).format(\"D MMMM YYYY\");\n};\nexport const formatDate = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString); // use moment-timezone, get the full year\n\n  const year = Number(tz(date, TIMEZONE).format(\"YYYY\")); // use number-to-word, convert to words\n\n  let yearStr = toWords(year); // change - begin with UpperCase, place commas with 'and'\n\n  yearStr = yearStr.replace(\",\", \" and\");\n  const yearReplacedStr = yearStr.substring(0, 1).toUpperCase().concat(yearStr.substring(1));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, tz(date, TIMEZONE).format(\"MMMM\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 43\n    }\n  }), \" \", yearReplacedStr);\n};\nexport const formatNRIC = nricFin => {\n  if (!nricFin) return null;\n  const arrayNric = nricFin.split(\":\");\n  return arrayNric.length === 3 ? arrayNric[2] : null;\n};\nexport const formatDatePrefix = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString); // use moment-timezone, get the day\n\n  const day = Number(tz(date, TIMEZONE).format(\"D\")); // use number-to-words, toWordsOrdinal - output first, second etc.\n\n  const strDay = toWordsOrdinal(day); // eg first day of\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }\n  }, strDay, \" day of\");\n};\nexport const formatCertName = meritFlag => /*#__PURE__*/React.createElement(\"p\", {\n  style: printMeritTextStyle,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 3\n  }\n}, meritFlag === \"Y\" ? \"WITH MERIT\" : \"\");\nexport const formatCertID = certId => {\n  if (!certId) return null;\n  const arrayCertId = certId.split(\":\");\n  return arrayCertId.length > 0 ? arrayCertId[0] : null;\n};\nexport const formatBold = str => /*#__PURE__*/React.createElement(\"strong\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 34\n  }\n}, str);\nexport const formatSignatoriesPosition = sigPosition => {\n  if (!sigPosition) return null;\n  return sigPosition.split(\"|\");\n};","map":{"version":3,"sources":["/OpenCerts/opencerts-renderer/src/components/templates/RPTemplate/common/functions.js"],"names":["React","tz","toWordsOrdinal","toWords","TIMEZONE","printMeritTextStyle","fontFamily","fontWeight","fontSize","color","textAlign","formatDDMMMYYYY","dateString","date","Date","format","formatDate","year","Number","yearStr","replace","yearReplacedStr","substring","toUpperCase","concat","formatNRIC","nricFin","arrayNric","split","length","formatDatePrefix","day","strDay","formatCertName","meritFlag","formatCertID","certId","arrayCertId","formatBold","str","formatSignatoriesPosition","sigPosition"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { tz } from \"moment-timezone\";\nimport { toWordsOrdinal, toWords } from \"number-to-words\";\n\nexport const TIMEZONE = \"Asia/Singapore\";\n\nexport const printMeritTextStyle = {\n  fontFamily: \"Arial\",\n  fontWeight: \"500!important\",\n  fontSize: \"2rem\",\n  color: \"#555\",\n  textAlign: \"center\"\n};\n\nexport const formatDDMMMYYYY = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n\n  return tz(date, TIMEZONE).format(\"D MMMM YYYY\");\n};\n\nexport const formatDate = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n\n  // use moment-timezone, get the full year\n  const year = Number(tz(date, TIMEZONE).format(\"YYYY\"));\n\n  // use number-to-word, convert to words\n  let yearStr = toWords(year);\n\n  // change - begin with UpperCase, place commas with 'and'\n  yearStr = yearStr.replace(\",\", \" and\");\n  const yearReplacedStr = yearStr\n    .substring(0, 1)\n    .toUpperCase()\n    .concat(yearStr.substring(1));\n  return (\n    <span>\n      {tz(date, TIMEZONE).format(\"MMMM\")} <br /> {yearReplacedStr}\n    </span>\n  );\n};\n\nexport const formatNRIC = nricFin => {\n  if (!nricFin) return null;\n  const arrayNric = nricFin.split(\":\");\n  return arrayNric.length === 3 ? arrayNric[2] : null;\n};\n\nexport const formatDatePrefix = dateString => {\n  if (!dateString) return null;\n  const date = new Date(dateString);\n\n  // use moment-timezone, get the day\n  const day = Number(tz(date, TIMEZONE).format(\"D\"));\n\n  // use number-to-words, toWordsOrdinal - output first, second etc.\n  const strDay = toWordsOrdinal(day);\n\n  // eg first day of\n  return <span>{strDay} day of</span>;\n};\n\nexport const formatCertName = meritFlag => (\n  <p style={printMeritTextStyle}>{meritFlag === \"Y\" ? \"WITH MERIT\" : \"\"}</p>\n);\n\nexport const formatCertID = certId => {\n  if (!certId) return null;\n  const arrayCertId = certId.split(\":\");\n  return arrayCertId.length > 0 ? arrayCertId[0] : null;\n};\n\nexport const formatBold = str => <strong>{str}</strong>;\n\nexport const formatSignatoriesPosition = sigPosition => {\n  if (!sigPosition) return null;\n  return sigPosition.split(\"|\");\n};\n"]},"metadata":{},"sourceType":"module"}