{"ast":null,"code":"var _jsxFileName = \"/OpenCerts/demo-opencerts-renderer/src/components/templates/RPTemplate/2020-P-CCA/index.js\";\nimport PropTypes from \"prop-types\";\nimport MultiCertificateRenderer from \"template-utils/MultiCertificateRenderer\";\nimport { approvedAddresses } from \"../common\";\nimport RPTranscript from \"./transcript\";\nconst templates = [{\n  id: \"transcript\",\n  label: \"Transcript\",\n  template: RPTranscript\n}];\n\nconst RPAA2020PCCA = props => /*#__PURE__*/React.createElement(MultiCertificateRenderer, Object.assign({\n  templates: templates,\n  whitelist: approvedAddresses\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n}));\n\nRPAA2020PCCA.displayName = \"2020-P-CCA Template\";\nRPAA2020PCCA.propTypes = {\n  certificate: PropTypes.object.isRequired\n};\nexport default RPAA2020PCCA;","map":{"version":3,"sources":["/OpenCerts/demo-opencerts-renderer/src/components/templates/RPTemplate/2020-P-CCA/index.js"],"names":["PropTypes","MultiCertificateRenderer","approvedAddresses","RPTranscript","templates","id","label","template","RPAA2020PCCA","props","displayName","propTypes","certificate","object","isRequired"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,EAAE,EAAE,YADN;AAEEC,EAAAA,KAAK,EAAE,YAFT;AAGEC,EAAAA,QAAQ,EAAEJ;AAHZ,CADgB,CAAlB;;AAQA,MAAMK,YAAY,GAAGC,KAAK,iBACxB,oBAAC,wBAAD;AACE,EAAA,SAAS,EAAEL,SADb;AAEE,EAAA,SAAS,EAAEF;AAFb,GAGMO,KAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAQAD,YAAY,CAACE,WAAb,GAA2B,qBAA3B;AACAF,YAAY,CAACG,SAAb,GAAyB;AACvBC,EAAAA,WAAW,EAAEZ,SAAS,CAACa,MAAV,CAAiBC;AADP,CAAzB;AAIA,eAAeN,YAAf","sourcesContent":["import PropTypes from \"prop-types\";\nimport MultiCertificateRenderer from \"template-utils/MultiCertificateRenderer\";\nimport { approvedAddresses } from \"../common\";\nimport RPTranscript from \"./transcript\";\n\nconst templates = [\n  {\n    id: \"transcript\",\n    label: \"Transcript\",\n    template: RPTranscript\n  }\n];\n\nconst RPAA2020PCCA = props => (\n  <MultiCertificateRenderer\n    templates={templates}\n    whitelist={approvedAddresses}\n    {...props}\n  />\n);\n\nRPAA2020PCCA.displayName = \"2020-P-CCA Template\";\nRPAA2020PCCA.propTypes = {\n  certificate: PropTypes.object.isRequired\n};\n\nexport default RPAA2020PCCA;\n"]},"metadata":{},"sourceType":"module"}